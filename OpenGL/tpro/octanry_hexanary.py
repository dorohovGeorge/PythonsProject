import math
import numpy as np
import cv2


class Octanry_Hexanary_huffman:
    def __init__(self, **info):
        self.data = info['data']
        self.file_type = info['file_type']

    def codegenerate(self):
        quat_huf_init = self.Octanary_hexanary_huffman_init(data=self.data, file_type=self.file_type)
        symbol_composition, symbol_frequency = quat_huf_init.p_generate()
        seat, codewords = quat_huf_init.seat_and_codewords(symbol_frequency)

        code = ''
        for data_current in self.data:
            index = symbol_composition.index(data_current)
            code = code + codewords[index]
        return code, symbol_composition, seat

    class Octanry_Hexanary_huffman_init():
        def __init__(self, **info):
            self.data = info['data']
            self.file_type = info['file_type']

        def p_generate(self):

            symbol_composition = []
            symbol_frequency = []

            if self.file_type == 'txt':
                for data_current in self.data:
                    t_existence = data_current in symbol_composition
                    if not t_existence:
                        symbol_composition.append(data_current)

                for symbol_current in symbol_composition:
                    symbol_frequency.append(self.data.count(symbol_current))

            else:
                for data_current in self.data:
                    t_existence = data_current[0] in symbol_composition
                    if not t_existence:
                        symbol_composition.append(data_current[0])

                for symbol_current in symbol_composition:
                    symbol_frequency.append(np.sum(self.data == symbol_current))

            record = [symbol_composition, symbol_frequency]
            record = list(record)
            record = list(map(list, zip(*record)))

            def takeSecond(elem):
                return elem[1]

            record.sort(key=takeSecond)

            symbol_composition = []
            symbol_frequency = []

            for c in record:
                symbol_composition.append(c[0])
                symbol_frequency.append(c[1] / len(self.data))

            return symbol_composition, symbol_frequency

        def seat_and_codewords(self, symbol_frequency):
            n = (len(symbol_frequency) - 1) % 3
            if (n == 0):
                symbol_frequency_fictitious = symbol_frequency
            elif (n == 1):
                symbol_frequency_fictitious = [0, 0] + symbol_frequency
            elif (n == 2):
                symbol_frequency_fictitious = [0] + symbol_frequency

            symbol_frequency_fictitious_initial = symbol_frequency_fictitious
            seat = []
            while (len(symbol_frequency_fictitious) != 4):
                smallest = sum(symbol_frequency_fictitious[0:4])
                p_sort_before = np.append(smallest, symbol_frequency_fictitious[4:])
                p_sort_after = np.sort(p_sort_before)
                seat.append(np.where(p_sort_after == smallest)[0][0])
                symbol_frequency_fictitious = p_sort_after

            table_octanary_hexanary_value = ['0', '1', '2', '3']
            codewords = []
            [codewords.append(octanary_hexanary_value) for octanary_hexanary_value in table_octanary_hexanary_value]

            codewords_temp = codewords
            for i in range(1, len(seat) + 1):
                seat_c = seat[-i]
                codewords = []
                [codewords.append(codewords_temp[seat_c] + octanary_hexanary_value) for octanary_hexanary_value in
                 table_octanary_hexanary_value]
                codewords_temp.pop(seat_c)
                codewords = codewords + codewords_temp
                codewords_temp = codewords

            codewords = codewords[0 + len(symbol_frequency_fictitious_initial) - len(symbol_frequency):]

            return seat, codewords


class Code_table_addition:
    def __init__(self, **info):
        self.symbol_composition = info['symbol_composition']
        self.seat = info['seat']
        self.file_type = info['file_type']

    def f_huffman_table(self):
        information_table = self.f_information_table()
        tree_table = self.f_tree_table()
        header1 = self.f_header1()
        header2 = self.f_header2()
        huffman_table = header1 + header2 + information_table + tree_table
        return huffman_table

    def f_information_table(self):
        information_table = []
        if self.file_type == 'txt':
            for word in self.symbol_composition:
                information_table.append(ord(word))
        else:
            for value in self.symbol_composition:
                information_table.append(value)

        information_table = self.f_decimal_to_octanary_hexanary(information_table)
        return information_table

    def f_tree_table(self):
        tree_table = self.f_decimal_to_octanary_hexanary(self.seat)
        return tree_table

    def f_header1(self):
        header1 = self.f_decimal_to_octanary_hexanary([len(self.symbol_composition)])
        return header1

    def f_header2(self):
        header2 = self.f_decimal_to_octanary_hexanary([len(self.seat)])
        return header2

    def f_decimal_to_octanary_hexanary(self, data):
        rec_octanary_hexanary = []
        for current in data:
            value_2 = str(bin(current)[2:].zfill(8))
            value_4 = ''
            for i in range(0, 8, 2):
                if value_2[i] == '0' and value_2[i + 1] == '0': value_4 = value_4 + '0'
                if value_2[i] == '0' and value_2[i + 1] == '1': value_4 = value_4 + '1'
                if value_2[i] == '1' and value_2[i + 1] == '0': value_4 = value_4 + '2'
                if value_2[i] == '1' and value_2[i + 1] == '1': value_4 = value_4 + '3'
            rec_octanary_hexanary.append(value_4)
        rec_octanary_hexanary = ''.join(rec_octanary_hexanary)
        return rec_octanary_hexanary


class Extension_mapping:
    def __init__(self, **info):
        [self.code5, self.code6] = c5c6()
        self.code_initial = info['code_initial']

    def f_extension_mapping_twice(self):
        extension_first = self.code_5to6(self.code_initial)
        extension_second = self.encode_homopolymer(extension_first)
        return extension_second

    def code_5to6(self, code):
        more = len(code) % 5
        temp = '0123'
        rec = ''
        for i in range(math.floor(len(code) / 5)):
            location = self.code5.index(code[i * 5:(i + 1) * 5])
            rec = rec + str(self.code6[location])

        if more != 0:
            rec = rec + code[-more:] + temp[0:(5 - more)]
        return rec

    def encode_homopolymer(self, code):
        rec = []
        i = 0
        while (i <= len(code) - 1):
            if code[i:i + 4] == '3333':
                rec.append('01233')
                i = i + 4

            elif code[i:i + 4] == '2222':
                rec.append('01232')
                i = i + 4

            elif code[i:i + 4] == '1111':
                rec.append('01231')
                i = i + 4

            elif code[i:i + 4] == '0000':
                rec.append('01230')
                i = i + 4

            else:
                rec.append(code[i])
                i = i + 1

        code = ''.join(rec)
        return code


class Segmentation_index(Extension_mapping):
    def __init__(self, **info):
        [self.code5, self.code6] = c5c6()
        self.sequences_initial = info['sequences_initial']
        self.n_bases_payload = info['n_bases_payload']

    def num_to_N(self, sequences_silicon):
        sequences = []
        for dna in sequences_silicon:
            rec = []
            for N in dna:
                if N == '0':
                    rec.append('A')
                elif N == '1':
                    rec.append('T')
                elif N == '2':
                    rec.append('G')
                elif N == '3':
                    rec.append('C')
            sequences.append(''.join(rec))
        return sequences

    def dna_generate(self):

        num_dna = math.ceil(len(self.sequences_initial) / self.n_bases_payload)

        rec_indices = []
        rec_payload = []

        if num_dna > 4 ** 5:
            value_threshold = 20
        else:
            value_threshold = 10

        for ic in range(num_dna):
            mid1 = bin(ic);
            mid2 = mid1[2:]
            while len(mid2) != value_threshold:
                mid2 = '0' + mid2

            mid_need = ''
            for i in range(0, 10, 2):
                if mid2[i] == '0' and mid2[i + 1] == '0':
                    mid_need = mid_need + '0'
                if mid2[i] == '0' and mid2[i + 1] == '1':
                    mid_need = mid_need + '1'
                if mid2[i] == '1' and mid2[i + 1] == '0':
                    mid_need = mid_need + '2'
                if mid2[i] == '1' and mid2[i + 1] == '1':
                    mid_need = mid_need + '3'

            mid_need = self.code_5to6(mid_need)

            rec_indices.append(mid_need)
            rec_payload.append(self.sequences_initial[ic * self.n_bases_payload:(ic + 1) * self.n_bases_payload])

        rec_sequence_number = []
        for i in range(num_dna):
            rec_sequence_number.append(rec_indices[i] + rec_payload[i])

        return rec_sequence_number

    def f_index_and_num2base(self):
        sequences_silicon = self.dna_generate()
        dna_sequences = self.num_to_N(sequences_silicon)

        return dna_sequences


class Extension_mapping_inverse:
    def __init__(self, **info):
        self.sequences_silicon = info['sequences_silicon']
        self.string_a = ['0000', '1111', '2222', '3333']
        self.string_b = ['01230', '01231', '01232', '01233']
        [self.code5, self.code6] = c5c6()

    def mapping_inverse_twice(self):
        results_mapping_1 = self.homopolymer()
        results_mapping_2 = self.my_6to5(results_mapping_1)

        return results_mapping_2

    def homopolymer(self):
        sequences_silicon_iter = self.sequences_silicon

        for index_string in range(4):
            results_mapping = ''
            l_sequences_length = len(sequences_silicon_iter)
            index = 0

            while (index <= l_sequences_length - 4):
                if sequences_silicon_iter[index:index + 5] == self.string_b[index_string]:
                    results_mapping += self.string_a[index_string]
                    index += 5
                else:
                    results_mapping += sequences_silicon_iter[index]
                    index += 1
            results_mapping += sequences_silicon_iter[-3:]
            sequences_silicon_iter = results_mapping

        return results_mapping

    def my_6to5(self, decode_mapping_init):

        if (len(decode_mapping_init) % 6 == 5):
            if (decode_mapping_init[-1] == '0'):
                n_real = -1
            elif decode_mapping_init[-2:] == '01':
                n_real = -2
            elif decode_mapping_init[-3:] == '012':
                n_real = -3
            elif decode_mapping_init[-4:] == '0123':
                n_real = -4
            decode_mapping = decode_mapping_init[0:len(decode_mapping_init) - 5];
        else:
            decode_mapping = decode_mapping_init
            n_real = -5

        l_decode_mapping = len(decode_mapping);
        decode = ''
        index = 0
        while (index <= l_decode_mapping - 6):
            group5 = self.code5[self.code6.index(decode_mapping[index:index + 6])]
            decode = decode + group5
            index += 6

        decode += decode_mapping_init[-5:n_real]

        return decode


class Code_table_reading:
    def __init__(self, **info):
        self.data = info['data']
        self.file_type = info['file_type']

    def f_code_table_reading(self):
        header1 = self.data[0:4]
        value_header1 = self.f_decode_header1(header1)

        header2 = self.data[4:8]
        value_header2 = self.f_decode_header2(header2)

        information_table = self.data[8:8 + (value_header1) * 4]
        symbol_composition = self.f_decode_infomation_table(information_table)

        tree_table = self.data[8 + value_header1 * 4:8 + value_header1 * 4 + (value_header2) * 4]
        seat = self.f_decode_tree_table(tree_table)

        decode_codewords = self.f_decode_codewords(seat, symbol_composition)
        payloads = self.data[8 + value_header1 * 4 + value_header2 * 4:]

        return payloads, decode_codewords, symbol_composition

    # Reconstruct the codewords according to the code table
    def f_decode_codewords(self, seat, symbol_composition):
        codewords = []
        codewords.append('0');
        codewords.append('1');
        codewords.append('2');
        codewords.append('3');
        codewords_temp = codewords

        for i in range(1, len(seat) + 1):
            seat_c = seat[-i]
            codewords = []
            codewords.append(codewords_temp[seat_c] + '0');
            codewords.append(codewords_temp[seat_c] + '1');
            codewords.append(codewords_temp[seat_c] + '2');
            codewords.append(codewords_temp[seat_c] + '3');
            codewords_temp.pop(seat_c)
            codewords = codewords + codewords_temp
            codewords_temp = codewords

        codewords_decode = codewords[len(codewords) - len(symbol_composition):]
        return codewords_decode

    # Octanary_hexanary to decimal
    def octanary_hexanary_to_decimal(self, string):
        rec = []
        mid = ''
        for i in string:
            if i == '0':
                mid = mid + '00'
            if i == '1':
                mid = mid + '01'
            if i == '2':
                mid = mid + '10'
            if i == '3':
                mid = mid + '11'

            if len(mid) == 8:
                rec.append(int('0b' + mid, 2))
                mid = ''
        return rec

    # Code table reading
    def f_decode_header1(self, string):
        return self.octanary_hexanary_to_decimal(string)[0]

    # Code table reading
    def f_decode_header2(self, string):
        return self.octanary_hexanary_to_decimal(string)[0]

    # Code table reading
    def f_decode_infomation_table(self, string):
        string_decimal = self.octanary_hexanary_to_decimal(string)
        symbol_composition = []
        if self.file_type == 'txt':
            [symbol_composition.append(chr(value)) for value in string_decimal]
        else:
            [symbol_composition.append(value) for value in string_decimal]
        return symbol_composition

    def f_decode_tree_table(self, string):
        return self.octanary_hexanary_to_decimal(string)


def decode_txt_pic(sequences, codewords, symbol_composition, file_type, size):
    flag_error = 0
    rec = []
    i = 0
    while (i <= len(sequences) - 1):
        judge = 0
        gap = 0

        while (judge != 1):
            gap += 1
            judge = codewords.count(sequences[i:i + gap]);
            if gap == 100:
                flag_error = 1;
                break
        if flag_error == 1:
            print('Decoding failed')
            break

        index = codewords.index(sequences[i:i + gap])
        rec.append(symbol_composition[index])
        i += gap
    if file_type == 'txt':
        rec = ''.join(rec)
    else:
        rec = np.array(rec, dtype='uint8').reshape(1, len(rec)).T
        image = rec.reshape(size[0], size[1], size[2])
        cv2.imshow("threshold", image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    return rec


def c5c6():
    code6 = ['211313', '212130', '233010', '203020', '122102', '002231', '310213', '020133', '031202', '022310',
             '032021', '130330', '210132', '031320', '132121', '213013', '320020', '200231', '012220', '120213',
             '213120', '313021', '032131', '201221', '010332', '300230', '020212', '203210', '033020', '013022',
             '121231', '230200', '002122', '122200', '021221', '200220', '201320', '310231', '120312', '120202',
             '023200', '302130', '103122', '021331', '200313', '211331', '020220', '310032', '231120', '020303',
             '020231', '023003', '103213', '231002', '130212', '120221', '230020', '033112', '220300', '210033',
             '303103', '220030', '103230', '112320', '202002', '310320', '311330', '313210', '212113', '120331',
             '030321', '032311', '231030', '121122', '012033', '132013', '231131', '203130', '210330', '203113',
             '212003', '231210', '313030', '033300', '221130', '113312', '201133', '130132', '110322', '011322',
             '121133', '301313', '311212', '213131', '021213', '201213', '120033', '131220', '103133', '231013',
             '233100', '130303', '003132', '032210', '201303', '133113', '312020', '023113', '320103', '320130',
             '022121', '320002', '312131', '311123', '112221', '113203', '302310', '313002', '002023', '131203',
             '102203', '102022', '102313', '022112', '230311', '133003', '303200', '101322', '202030', '202120',
             '102220', '303120', '201312', '131123', '201023', '202103', '301202', '133102', '122131', '203300',
             '212031', '030203', '132020', '302003', '303131', '221113', '220013', '220131', '103331', '231112',
             '133120', '031033', '210312', '122311', '202311', '230130', '312103', '012132', '033002', '120320',
             '300203', '212121', '230103', '022103', '321021', '310303', '132130', '102330', '100233', '132211',
             '132300', '102321', '032120', '120022', '013320', '310133', '112023', '121303', '133030', '112331',
             '033031', '133210', '211022', '020330', '213311', '210321', '103202', '031231', '311203', '230031',
             '033121', '300132', '300312', '220211', '112212', '003203', '221031', '002302', '022020', '032113',
             '211202', '131302', '103023', '310023', '303311', '320310', '002212', '302113', '003321', '013123',
             '001332', '032003', '220102', '220021', '033103', '311221', '020122', '022211', '211230', '022002',
             '031122', '121330', '112032', '213112', '203121', '031303', '013331', '121321', '311302', '010223',
             '122030', '033013', '202112', '001223', '113321', '021032', '203102', '102033', '112302', '112230',
             '002320', '013212', '113132', '131313', '200302', '212300', '032030', '301032', '202021', '021230',
             '103032', '030023', '113033', '121212', '300321', '221200', '112231', '312031', '022210', '102122',
             '012212', '102221', '031313', '131230', '013231', '122031', '203211', '103123', '133002', '130320',
             '311133', '311230', '230121', '132021', '311032', '130033', '020023', '103212', '021123', '310203',
             '110223', '033021', '310302', '131122', '120231', '102331', '210032', '003230', '121202', '133311',
             '112123', '012032', '100323', '003331', '300302', '002132', '213210', '211221', '203030', '200321',
             '102032', '110332', '211033', '112132', '212200', '012230', '203120', '132112', '313211', '221003',
             '312102', '310321', '221020', '313130', '021132', '210202', '303210', '131321', '121313', '122211',
             '311331', '313200', '203112', '203003', '320131', '321030', '303031', '010233', '020230', '230102',
             '101223', '311213', '230210', '022021', '013313', '001323', '213300', '211303', '131312', '103220',
             '200212', '220002', '210231', '013330', '033102', '033211', '311122', '201302', '231021', '301330',
             '310022', '302131', '313121', '132131', '010322', '310330', '312300', '301212', '210133', '003320',
             '213002', '021321', '320021', '302030', '301321', '311312', '011232', '013321', '112220', '221102',
             '003213', '300213', '300221', '302112', '022311', '213031', '113230', '310212', '030202', '233011',
             '112312', '201032', '203021', '120122', '230300', '031331', '031203', '103022', '231310', '102202',
             '031133', '303013', '032002', '312120', '220031', '022013', '301220', '021022', '312113', '012133',
             '220200', '220103', '212030', '202031', '301022', '023103', '301303', '011223', '122113', '031221',
             '231130', '132103', '221210', '031212', '302103', '113133', '310033', '230113', '122003', '231211',
             '302211', '223110', '022130', '212021', '311320', '113032', '210122', '213103', '102133', '002220',
             '200132', '120303', '030330', '033200', '302021', '131032', '212211', '003202', '311202', '220120',
             '122121', '013220', '320211', '003133', '003312', '213020', '022300', '113023', '133013', '302200',
             '300122', '120032', '202210', '103313', '030303', '220311', '313310', '221131', '033130', '130022',
             '320013', '300202', '201203', '012023', '112303', '113331', '113213', '203131', '202300', '113202',
             '312003', '310220', '202013', '023031', '202020', '230003', '312311', '003023', '021312', '103231',
             '232110', '121221', '023310', '021220', '130302', '023120', '022102', '002123', '130203', '030032',
             '131213', '200330', '012203', '013033', '321002', '112022', '203310', '102213', '301123', '013122',
             '311023', '231103', '301033', '320112', '303002', '221300', '210023', '300231', '310313', '121023',
             '202102', '132310', '023211', '030231', '313311', '032031', '210303', '103203', '032112', '311132',
             '201132', '133031', '103320', '312121', '113123', '102123', '302210', '003212', '121331', '200133',
             '303020', '212102', '013132', '301221', '031230', '211032', '320210', '202310', '200230', '030122',
             '131231', '130230', '013221', '321020', '211231', '202003', '201330', '022200', '213021', '113303',
             '002230', '033030', '312002', '203103', '121022', '312200', '312013', '130202', '020313', '022030',
             '132030', '201202', '012122', '301320', '032103', '201321', '321031', '121132', '120212', '133121',
             '020203', '033310', '231200', '303121', '021202', '002022', '133112', '210213', '132102', '100332',
             '003330', '310122', '130313', '113212', '220310', '102312', '202130', '230112', '131330', '311220',
             '300330', '313131', '320311', '211212', '103221', '103033', '301213', '211133', '122021', '300303',
             '033113', '022113', '300220', '021023', '021303', '033131', '030312', '023121', '212020', '102132',
             '121302', '020022', '021133', '003122', '110232', '232100', '231003', '022131', '113231', '212131',
             '310230', '102303', '320030', '023102', '010323', '030133', '133310', '211203', '030213', '320003',
             '221021', '131212', '203200', '020221', '311321', '003032', '200032', '112133', '012213', '221112',
             '302102', '133020', '313120', '020302', '220113', '303211', '122112', '210022', '133130', '112313',
             '012202', '321102', '313102', '122013', '200320', '301133', '203031', '212210', '120330', '120023',
             '120220', '023013', '221120', '223010', '310221', '002313', '122310', '200203', '310202', '301122',
             '131023', '202121', '221103', '203013', '130221', '310312', '130331', '122002', '302120', '211320',
             '002331', '032300', '301312', '313113', '312030', '030220', '013302', '031022', '002033', '211023',
             '120321', '223100', '033210', '112203', '132210', '301331', '020331', '321013', '033311', '023020',
             '121123', '220121', '211302', '133200', '112321', '312310', '311313', '012231', '121230', '120133',
             '003231', '312112', '201123', '202113', '303130', '320121', '313003', '003303', '210220', '031123',
             '113022', '221311', '200331', '011332', '200122', '213310', '213130', '023130', '121320', '023300',
             '310331', '232010', '211122', '231121', '122120', '221030', '320300', '020033', '133211', '121033',
             '021330', '201220', '102231', '230021', '200221', '020132', '203002', '131133', '020320', '201313',
             '013230', '031132', '303112', '002203', '113220', '201022', '300023', '013203', '312211', '203311',
             '001322', '212311', '003220', '002221', '103302', '303300', '121203', '031302', '031321', '032102',
             '013133', '202211', '031312', '320200', '020032', '102302', '133300', '320113', '110323', '013202',
             '132311', '021302', '310132', '030313', '201331', '223011', '112330', '311303', '303030', '032121',
             '113122', '030331', '012022', '131033', '210313', '020321', '030033', '131132', '301132', '003302',
             '113313', '213102', '210212', '210331', '312021', '113221', '311231', '013312', '302031', '301023',
             '121220', '131221', '120313', '200303', '201212', '130231', '213030', '210302', '212120', '003313',
             '113320', '130023', '221310', '121312', '031032', '110233', '302002', '002202', '031023', '213211',
             '200213', '311022', '210320', '020202', '013032', '112033', '003022', '202131', '320120', '023210',
             '321003', '100232', '212013', '103132', '102230', '130122', '200312', '113302', '120132', '003221',
             '303113', '013213', '030132', '100322', '231311', '013303', '102212', '002133', '300212', '132002',
             '023131', '213113', '021320', '133021', '032200', '231020', '230030', '313020', '221121', '120203',
             '231300', '031213', '312210', '130213', '132031', '131331', '023002', '020213', '132113', '112202',
             '220003', '100223', '230131', '122130', '211220', '130312', '213121', '210221', '130133', '032020',
             '131303', '302311', '030221', '102320', '131202', '213200', '121213', '220112', '212002', '112213',
             '033003', '301203', '021033', '021212', '122210', '101323', '303310', '120230', '121032', '002330',
             '213003', '031330', '231113', '032013', '011323', '002303', '012123', '021203', '212112', '033120',
             '221013', '210230', '232011', '021122', '300133', '302020', '002321', '202200', '211330', '030302',
             '210203', '312130', '201033', '300313', '320102', '002312', '302121', '032130', '211213', '313300',
             '211321', '230120', '220020', '233110', '003123', '131022', '220130', '302300', '230002', '103330',
             '211123', '303102', '230013', '122103', '201122', '122020', '032211', '320031', '230310', '022120',
             '112122', '012221', '230211', '220210', '133103', '103321', '023112', '030230', '022003', '300032',
             '023021', '030212', '011233', '301302', '103312', '113330', '300320', '313103', '003033', '231031',
             '032310', '010232', '221211', '023311', '020312', '101332', '130032', '030320', '021231', '313013',
             '212103', '212310', '031220', '311033', '013023', '130220', '023030', '021313', '211132', '221002',
             '030022', '313112', '302013', '303021', '122300', '132120', '103303', '211312', '002213', '300331',
             '131320', '133131', '132200', '120302', '022031', '102023', '313031', '132003', '200202', '130321',
             '231102', '303003', '002032', '200023']
    code5 = ['00000', '00001', '00002', '00003', '00010', '00011', '00012', '00013', '00020', '00021', '00022', '00023',
             '00030', '00031', '00032', '00033', '00100', '00101', '00102', '00103', '00110', '00111', '00112', '00113',
             '00120', '00121', '00122', '00123', '00130', '00131', '00132', '00133', '00200', '00201', '00202', '00203',
             '00210', '00211', '00212', '00213', '00220', '00221', '00222', '00223', '00230', '00231', '00232', '00233',
             '00300', '00301', '00302', '00303', '00310', '00311', '00312', '00313', '00320', '00321', '00322', '00323',
             '00330', '00331', '00332', '00333', '01000', '01001', '01002', '01003', '01010', '01011', '01012', '01013',
             '01020', '01021', '01022', '01023', '01030', '01031', '01032', '01033', '01100', '01101', '01102', '01103',
             '01110', '01111', '01112', '01113', '01120', '01121', '01122', '01123', '01130', '01131', '01132', '01133',
             '01200', '01201', '01202', '01203', '01210', '01211', '01212', '01213', '01220', '01221', '01222', '01223',
             '01230', '01231', '01232', '01233', '01300', '01301', '01302', '01303', '01310', '01311', '01312', '01313',
             '01320', '01321', '01322', '01323', '01330', '01331', '01332', '01333', '02000', '02001', '02002', '02003',
             '02010', '02011', '02012', '02013', '02020', '02021', '02022', '02023', '02030', '02031', '02032', '02033',
             '02100', '02101', '02102', '02103', '02110', '02111', '02112', '02113', '02120', '02121', '02122', '02123',
             '02130', '02131', '02132', '02133', '02200', '02201', '02202', '02203', '02210', '02211', '02212', '02213',
             '02220', '02221', '02222', '02223', '02230', '02231', '02232', '02233', '02300', '02301', '02302', '02303',
             '02310', '02311', '02312', '02313', '02320', '02321', '02322', '02323', '02330', '02331', '02332', '02333',
             '03000', '03001', '03002', '03003', '03010', '03011', '03012', '03013', '03020', '03021', '03022', '03023',
             '03030', '03031', '03032', '03033', '03100', '03101', '03102', '03103', '03110', '03111', '03112', '03113',
             '03120', '03121', '03122', '03123', '03130', '03131', '03132', '03133', '03200', '03201', '03202', '03203',
             '03210', '03211', '03212', '03213', '03220', '03221', '03222', '03223', '03230', '03231', '03232', '03233',
             '03300', '03301', '03302', '03303', '03310', '03311', '03312', '03313', '03320', '03321', '03322', '03323',
             '03330', '03331', '03332', '03333', '10000', '10001', '10002', '10003', '10010', '10011', '10012', '10013',
             '10020', '10021', '10022', '10023', '10030', '10031', '10032', '10033', '10100', '10101', '10102', '10103',
             '10110', '10111', '10112', '10113', '10120', '10121', '10122', '10123', '10130', '10131', '10132', '10133',
             '10200', '10201', '10202', '10203', '10210', '10211', '10212', '10213', '10220', '10221', '10222', '10223',
             '10230', '10231', '10232', '10233', '10300', '10301', '10302', '10303', '10310', '10311', '10312', '10313',
             '10320', '10321', '10322', '10323', '10330', '10331', '10332', '10333', '11000', '11001', '11002', '11003',
             '11010', '11011', '11012', '11013', '11020', '11021', '11022', '11023', '11030', '11031', '11032', '11033',
             '11100', '11101', '11102', '11103', '11110', '11111', '11112', '11113', '11120', '11121', '11122', '11123',
             '11130', '11131', '11132', '11133', '11200', '11201', '11202', '11203', '11210', '11211', '11212', '11213',
             '11220', '11221', '11222', '11223', '11230', '11231', '11232', '11233', '11300', '11301', '11302', '11303',
             '11310', '11311', '11312', '11313', '11320', '11321', '11322', '11323', '11330', '11331', '11332', '11333',
             '12000', '12001', '12002', '12003', '12010', '12011', '12012', '12013', '12020', '12021', '12022', '12023',
             '12030', '12031', '12032', '12033', '12100', '12101', '12102', '12103', '12110', '12111', '12112', '12113',
             '12120', '12121', '12122', '12123', '12130', '12131', '12132', '12133', '12200', '12201', '12202', '12203',
             '12210', '12211', '12212', '12213', '12220', '12221', '12222', '12223', '12230', '12231', '12232', '12233',
             '12300', '12301', '12302', '12303', '12310', '12311', '12312', '12313', '12320', '12321', '12322', '12323',
             '12330', '12331', '12332', '12333', '13000', '13001', '13002', '13003', '13010', '13011', '13012', '13013',
             '13020', '13021', '13022', '13023', '13030', '13031', '13032', '13033', '13100', '13101', '13102', '13103',
             '13110', '13111', '13112', '13113', '13120', '13121', '13122', '13123', '13130', '13131', '13132', '13133',
             '13200', '13201', '13202', '13203', '13210', '13211', '13212', '13213', '13220', '13221', '13222', '13223',
             '13230', '13231', '13232', '13233', '13300', '13301', '13302', '13303', '13310', '13311', '13312', '13313',
             '13320', '13321', '13322', '13323', '13330', '13331', '13332', '13333', '20000', '20001', '20002', '20003',
             '20010', '20011', '20012', '20013', '20020', '20021', '20022', '20023', '20030', '20031', '20032', '20033',
             '20100', '20101', '20102', '20103', '20110', '20111', '20112', '20113', '20120', '20121', '20122', '20123',
             '20130', '20131', '20132', '20133', '20200', '20201', '20202', '20203', '20210', '20211', '20212', '20213',
             '20220', '20221', '20222', '20223', '20230', '20231', '20232', '20233', '20300', '20301', '20302', '20303',
             '20310', '20311', '20312', '20313', '20320', '20321', '20322', '20323', '20330', '20331', '20332', '20333',
             '21000', '21001', '21002', '21003', '21010', '21011', '21012', '21013', '21020', '21021', '21022', '21023',
             '21030', '21031', '21032', '21033', '21100', '21101', '21102', '21103', '21110', '21111', '21112', '21113',
             '21120', '21121', '21122', '21123', '21130', '21131', '21132', '21133', '21200', '21201', '21202', '21203',
             '21210', '21211', '21212', '21213', '21220', '21221', '21222', '21223', '21230', '21231', '21232', '21233',
             '21300', '21301', '21302', '21303', '21310', '21311', '21312', '21313', '21320', '21321', '21322', '21323',
             '21330', '21331', '21332', '21333', '22000', '22001', '22002', '22003', '22010', '22011', '22012', '22013',
             '22020', '22021', '22022', '22023', '22030', '22031', '22032', '22033', '22100', '22101', '22102', '22103',
             '22110', '22111', '22112', '22113', '22120', '22121', '22122', '22123', '22130', '22131', '22132', '22133',
             '22200', '22201', '22202', '22203', '22210', '22211', '22212', '22213', '22220', '22221', '22222', '22223',
             '22230', '22231', '22232', '22233', '22300', '22301', '22302', '22303', '22310', '22311', '22312', '22313',
             '22320', '22321', '22322', '22323', '22330', '22331', '22332', '22333', '23000', '23001', '23002', '23003',
             '23010', '23011', '23012', '23013', '23020', '23021', '23022', '23023', '23030', '23031', '23032', '23033',
             '23100', '23101', '23102', '23103', '23110', '23111', '23112', '23113', '23120', '23121', '23122', '23123',
             '23130', '23131', '23132', '23133', '23200', '23201', '23202', '23203', '23210', '23211', '23212', '23213',
             '23220', '23221', '23222', '23223', '23230', '23231', '23232', '23233', '23300', '23301', '23302', '23303',
             '23310', '23311', '23312', '23313', '23320', '23321', '23322', '23323', '23330', '23331', '23332', '23333',
             '30000', '30001', '30002', '30003', '30010', '30011', '30012', '30013', '30020', '30021', '30022', '30023',
             '30030', '30031', '30032', '30033', '30100', '30101', '30102', '30103', '30110', '30111', '30112', '30113',
             '30120', '30121', '30122', '30123', '30130', '30131', '30132', '30133', '30200', '30201', '30202', '30203',
             '30210', '30211', '30212', '30213', '30220', '30221', '30222', '30223', '30230', '30231', '30232', '30233',
             '30300', '30301', '30302', '30303', '30310', '30311', '30312', '30313', '30320', '30321', '30322', '30323',
             '30330', '30331', '30332', '30333', '31000', '31001', '31002', '31003', '31010', '31011', '31012', '31013',
             '31020', '31021', '31022', '31023', '31030', '31031', '31032', '31033', '31100', '31101', '31102', '31103',
             '31110', '31111', '31112', '31113', '31120', '31121', '31122', '31123', '31130', '31131', '31132', '31133',
             '31200', '31201', '31202', '31203', '31210', '31211', '31212', '31213', '31220', '31221', '31222', '31223',
             '31230', '31231', '31232', '31233', '31300', '31301', '31302', '31303', '31310', '31311', '31312', '31313',
             '31320', '31321', '31322', '31323', '31330', '31331', '31332', '31333', '32000', '32001', '32002', '32003',
             '32010', '32011', '32012', '32013', '32020', '32021', '32022', '32023', '32030', '32031', '32032', '32033',
             '32100', '32101', '32102', '32103', '32110', '32111', '32112', '32113', '32120', '32121', '32122', '32123',
             '32130', '32131', '32132', '32133', '32200', '32201', '32202', '32203', '32210', '32211', '32212', '32213',
             '32220', '32221', '32222', '32223', '32230', '32231', '32232', '32233', '32300', '32301', '32302', '32303',
             '32310', '32311', '32312', '32313', '32320', '32321', '32322', '32323', '32330', '32331', '32332', '32333',
             '33000', '33001', '33002', '33003', '33010', '33011', '33012', '33013', '33020', '33021', '33022', '33023',
             '33030', '33031', '33032', '33033', '33100', '33101', '33102', '33103', '33110', '33111', '33112', '33113',
             '33120', '33121', '33122', '33123', '33130', '33131', '33132', '33133', '33200', '33201', '33202', '33203',
             '33210', '33211', '33212', '33213', '33220', '33221', '33222', '33223', '33230', '33231', '33232', '33233',
             '33300', '33301', '33302', '33303', '33310', '33311', '33312', '33313', '33320', '33321', '33322', '33323',
             '33330', '33331', '33332', '33333']
    return code5, code6


def f_read_data_from_file(filename_in_data):
    if filename_in_data[-3:] == 'txt':
        file_type = 'txt'
        print('This is a text file')
        with open(filename_in_data, 'r') as f1:
            data = ''.join(f1.readlines())
        size = None

    else:
        file_type = 'bmp'
        image = cv2.imread(filename_in_data)
        data = image.reshape(1, image.size).T
        size = image.shape

    return data, file_type, size
